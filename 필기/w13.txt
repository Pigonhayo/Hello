if <조건문>
then
  <수행문>
  <...>
fi

- 들여쓰기는 스크립트에서 가독성을 위해 하는게 좋다
- if의 종료 상태(exit status)가 0이 되면 then 구문을 탄다.
- 0 : 성공
- 1, 2, 3.. : 실패
- 종료 상태 확인하기
$?
- 파이프라인일 경우
 프로그램 | 프로그램 | ... | 프로그램
  - 마지막 프로그램의 종료상태가 되면 전체 파이프라인의 종료상태가 됨

  ## 참/거짓을 판단하는 프로그램
  test <True/False 비교문>
  - true일 경우 종료 상태 0으로 반환하는 프로그램

  ## Q. 이름 변수에 할당하고 빈값인지 확인하는 조건문 작성해서 보내
  name="Taeho"
  if test $name = "" // 비교하는 연산자이므로 등호 양옆으로 띄어야 함
  then
  echo yes
  fi
-> 아무것도 안나옴 (!=로 바꾸면 yes 출력됨)

  ## 문자열 비교연산자
   - 같다 =
   - 다르다 !=
   - str #null
   - -n # is not null
   - -z # is null

   name=""
    if test -z $name
    then
    echo 빈 값
    fi


# test 표현식

 if [ -z $name ]
 then
 echo 빈값
 fi

- [, ]로 감싼다. "test" 프로그램 돌리는 표현식
- 앞뒤로 공백 넣기

## Q. 표현식으로 바꾸고 종료상태 확인하는 코드 보내
name="KANE"
if [ -z $name ]  # if [ -z "$name"] 따옴표로 감싸는게 좋음(K K 오)
then
echo null
fi
echo $?  # 이전 명령어의 종료 상태 출력

## 수치비교
num1, num2
-eq : equal
-gt : greater than
-lt
-ge
-le
-ne : not equal

 [ not -eq num2 ]

## Q. 스크립트: count
전체 인수가 0이 아닐 때, "프로그램을 실행합니다."라는 문구 출력하는 조건문 작성
if [ $# -ne 0 ]; then  // $# 변수는 스크립트에 전달된 인수의 개수 나타
    echo "프로그램을 실행합니다."
else
    echo "인수가 필요합니다."
fi

# 종료 프로그램
exit n
- 셸 종료 코드 지정
- exit 프로그램을 사용하지 않으면 마지막 프로그램의 종료 상태가 반환된다

 count=4
 if [ $count - gt 0 ] && [ $count - lt 10]
 then
  echo 0~10 사이 # 종료상태
  exit 0
else
  exit 1
fi

##else
if []
then
  cmd1
elif [ ]
then
  cmd2
else
  cmd3
fi

## 시간을 나타내는 연산자
%Y: 연도(예: 2024)
%m: 월(01-12)
%d: 일(01-31)
%H: 시(00-23, 24시간 형식)
%I: 시(01-12, 12시간 형식)
%M: 분(00-59)
%S: 초(00-59)
%p: AM 또는 PM
%F: 전체 날짜(예: 2024-06-01, YYYY-MM-DD 형식)
%T: 전체 시간(예: 15:45:30, HH:MM:SS 형식)

확인하는 법: date +%H (예시)

# Q. 시간을 기분으로 인사하는 프로그램 만들기
12-9시 굿모닝
9시-5시 굿애프터눈
5시-12시 굿이브닝
+ 종료상태 설정

hour=$(date +%H)
hour=$(( hour + 9 )) // 한국 표준시로 바꾸기기

if [ $hour -ge 0 ] && [ $hour -lt 9 ]
then
  echo 굿모닝
  exit 0
elif [ $hour -ge 9 ] && [ $hour -lt 17 ]
then
  echo 굿애프터눈
  exit 1
else
  echo 굿이브닝
  exit 2
fi


# 파일 비교
- 파일의 형태, 빈 파일인지, 권한 등등 판별하는 연산자
- 구조: <옵션> <디렉토리/파일>
- 종류:
 - -d tmp/ : tmp/가 디렉토리인가
  [ -d tmp/ ]
   - -f : 파일
   - -s : 파일이 비어있지 않은지
   - -x : executable
   - -w : writeable
   - -r : readable
   - -e : exists

## 논리 부정 연산자
[ ! -x file]

##
(조건1) and/or (조건2)
-a
-o
[ -r file -a 3 -eq 4]
 - and에서 주의할 것!
  - 조건1이 False면 조건2는 안 탄다.


## Q. 0 < $x < 10

## Q. "$name이 널값이 아니거나 $file이 읽기 가능할 경우"
if [ \(! $name = null\) -o \($name -r\) ]

- 괄호는 이스케이프가 필요함
- 띄어쓰기 주의할 것
- A or (B and C) (and가 우선한다)

# case 표현식
1) jan
2) feb
3) ...
4) dec

dog) 개
cat) 고양이

case 값
in
  패턴 1) cmd
          cmd;; # 패턴 1일 경우에 세미콜론 전까지 명령 수행
  패턴 2) ...
esac # case

- 매칭되는 패턴 없으면 아무것도 실행하지 않는다

## Q. count 확장하기
 - 인수가 없으면 오류 종료
 - 인수가 한개면 실행
  - 숫자를 받아서 환산 (1 받으면 Jan 2 받으면 Feb...)
  - 그 외: "존재하지 않는 달입니다."
 - 인수가 두개 이상이면 또 다른 오류로 종료
 - 예: 파일명 month

 ./month

 Q. 숫자 대문자 소문자 특수문자 판별하는 스크립트 만들
[0-9] ) echo "숫자입니다" ;;

### 패턴이 여러개인 경우
패턴1 | 패턴2 ) 명령문 ;;

## 시간으로 인사하기 -> case로 바꿔보기

if [ ]
then
 :
else
fi

: 아무것도 하지 말기 (pass)

##  &&. ||
프로그램1 && 프로그램2 : 1이 성공하면 2를 실행하라

- || : 1이 실패하면 2를 수행하라

file을 정렬하고 file에 저장하라.

&& and
&& if안에 쓸때

## Q. $file에 존재하지 않으면 /etc/passwd를 변수 $file에 할당하라

- 프로그램1 && 프로그램2 || 프로그램3



4로 나뉘지 않으면 윤년이 아니다.
4로 나뉘고 400으로 나뉘면 윤년이다.
4로 나뉘지만 400으로 나뉘지 않을 경우, 100으로 나뉘면 윤년이 아니다. 
그외 4로 나뉘면 윤년이다.
























































