## Shell 셸
: 리눅스 커널과 사용자를 연결시켜주는 인터페이스
역할 -> 사용자의 입력을 읽고, 해석하고, 프로그램 실행, 운영체제와 파일 연결하는 작업(2.5에서 추가)

## 리눅스 명령(command)
의미
1. 하나의 단어로 이름 붙여진 실행 가능한 프로그램. 셸 내장명령.
2. 단순 명령: 프로그램 + 명령 인수
3. 결합명령: 단순 명령이 여러개 있는 (<프로그램> <옵션> <내용>)

특징
1. 한 프로그램이 한가지 일만 함
2. 명령의 조합을 잘해야함

- 프로그램 구체화
"-h"

- cat : 파일의 내용 출력
- ls : 디렉터리 속 파일 목록 출력 (-l 옵션: 자세한 내용 담음)
- mv : 파일명 변경
- less : 파일의 내용을 한 화면씩 나눠 출력(화면 꽉 참) // 빠져나올떄 q 입력
- cd(change directory) : 파일 변경

Q. /bin 하위 디렉터리를 라인별로 출력
ls -l /bin
프로그램 옵션(-로 시작) 내용(''치면 안됨)

ls -l : 현재 디렉터리에 있는 파일 정보 보여줌

# 파이프
- 명령형 | 명령형
- 이전 명령행의 출력값을 다음 명령행의 입력갔으로 보내는 역할
'echo $PATH | less'

# 기본 명령(wc, head, cut, grep, sort, uniq)
1. wc
: 파일 내용의 줄(line) 수, 단어(word) 수, 문자(character) 수 세어 출력하는 명령

- 옵션(-l, -w, -c)

******************************************************
이상해 ~~~
****Q. wc로 이 파일(w1.txt)의 내용 출력
****wc w1.txt

Q. 지금 디렉터리의 하위 디렉터리 내용의 줄 수, 단어 수, 문자 수 출력
ls -l | wc -l
ls -l | wc -w
ls -l | wc -c

Q. w1.txt 파일 단어 몇 글자인지 출력
wc -w w1.txt

Q. /bin 파일 + 디렉터리 개수 출력
ls /bin | wc -l
ls -l /bin | wc -l --> 한개가 추가되서 출력됨(total이 추가됨)

-1 : 한줄에 파일명 하나만 출력
ex) ls -1


2. head
: 파일의 n째줄(default == 10) 내용을 화면에 출력하는 명령

if) 파일이 90줄인데 head -n100 입력
-> 90줄까지 출력

- 옵션(-n)

Q. w1.txt의 첫번째 줄 단어 수, 글자 수 출력
head -n1 w1.txt | wc -w -c
head -n1 w1.txt | wc -wc

Q. /bin 파일 중에서 앞에 5개만 출력
ls /bin | head -n5
ls /bin | head -5
-l 붙이면 틀림.........당연하지.


3. cut
: 파일의 내용 중에서 특정 열만 출력하는 명령

- 옵션(-f(탭 기준), -c(문자 수), -d<구분자>)
- 스페이스바 기준으로 자르고 싶을때 -> cut -d' ' 

- 범위 지정 방법
3,5,6 -> cut -f3,5,6
4~5 -> cut -f4-5

Q. animals.txt 3번째 필드 조회
cut -f3 animals.txt

Q. animals.txt 첫번째 필드 + 첫번째 줄만 출력
cut -f1 animals.txt | head -n1

Q. animals.txt 첫번째 필드 마지막 글자 출력
cut -f1 animals.txt | rev | cut -c1

Q. animals.tx 네번쨰 필드에서 Lutz만 가져오기(Lact name)
cut -f4 animals.txt | cut -d, -f1


4. grep
: 문자열 매칭하는 명령

- 대소문자 구분
- 라인 전체 출력됨
*(모든 txt 파일)

- 옵션(-v(반대로 없는 줄만 출력), -w(온전한 단어만 출력력) -i(대소문자 구분 안함))

Q. The가 있는 txt 파일 전체 조회
grep The *.txt

Q. /usr/lib에 포함된 하위 디렉터리 개수 출력
ls -l /usr/lib | cut -c1 | grep d | wc -l

*************************************************이상해이상해
- 파일 개수
ls -l /usr/lib | cut -c1 | grep -v d | wc -l
-->  total 포함되면서 한개가 추가되어서 출력됨;;;


5. sort
:오름차순 정렬하는 명령

- 옵션(-n(숫자 정렬), -r(내림차순 정렬))

if) 파일에 root가 있고 aroot가 있는데 root만 출력하고 싶을 때
grep -w root
grep root -w

Q. animals.txt 3번째 필드 오름차순 정렬
cut -f3 animals.txt | sort -n

Q. animals.txt 3번째 필드 최댓값, 최솟값 출력
최소: cut -f3 animals.txt | sort -n | head -n1
최대: cut -f3 animals.txt | sort -nr | head -n1

Q. /etc/passwd 디렉터리에서 사용자 이름 정렬 후 출력
1st. cat /etc/pawssd -> 디렉터리 확인
2nd. cut -d: -f1 /etc/passwd | sort -> 문제 수행

Q. 사용자 중 root 있는지 확인(존재하는 라인만 출력)
head /etc/passwd | cut -d: -f1 | grep root

- sort -n : String -> num
if) sort -n 이면 1 2 11 111
    sort 이면 1 11 111 2

6. uniq
: 중복된 문자열 보여주되, 인접한 중복 문자열만 출력

- 옵션(-c(반복된 횟수 표시))

Q. grades에서 가장 빈번하지 않은 등급부터 출력
cut -c1 grades | sort | uniq -c | sort -n

sort -> uniq : 정렬 후 중복 제거
uniq -> sort : 중복문자 제거 후 정리

------------------------------------------------------------------------

## 버전 관리
: 파일의 변를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 꺼내올 수 있는 시스템

- 툴: 깃

# 깃
- 데이터 저장 방식: 스냅삿 찍듯이 저장(오프라인도 가능)

- if 빈 -> 텍스트 입력 -> 빈 파일
- 키(key) - 벨류(value) - (해쉬) // 키는 고유함
- 벨류(텍스트)

- 깃 상태
수정: 파일이 변경된 상태 (스테이징 -> 커밋) // 커밋 순서: 상태체크 -> (수정) -> 스테이징 -> 커밋
커밋: 저장
스테이지: 스냅샷 찍어서 커밋할 준비가 된 상태

1) 버전 체크
git --version

2) 사용자 정보 설정
- name: git config --global user.name 이혜원 // "이혜원"
- email: git config --global user.email hyewon4782@naver.com
- 옵션: grobal: 전체 시스템에 영향을 줌 // 프로젝트마다 다른 이름 사용할 땐 제외
- 확인 -> git config --list

- core.editor(깃 구성 설정 중 하나)
 - vi 빠져나올때는 :q + enter
- git help <프로그램명>


## 디렉터리(directory)
: 폴더

- 트리구조 가짐
ex) animals/
     ㄴ name.txt(파일)
     ㄴ age.txt
     mammals/
      ㄴ cow.txt (트리구조)
    reptile/
      ㄴ 

- 현재 디렉터리: working directory, current directory
- 하위 디렉터리(child) animals >> mammals
- 상위 디렉터리(parent) mammals >> animals
- 형제 디렉터리(sibling) mammals, reptile

- 디렉터리 형태 구분: /(루트 디렉터리) -> animals/mammals/cow.txt <디렉터리/.../파일명>

- 여러 파일 한번에 스테이징
git add
- git commit -> txt
git commit -m "메세지" ->  txt 파일로 저장하지 않고 메세지 남기기


## 경로
1) 절대경로: 루트에서부터 시작, 슬래시로 시작(/.../mammals)
2) 상대경로: 현재 디렉터리에서 시작함. 부모는 .. 현재는 .으로 표현(나를 기준으로 한칸 이동)
if) 내 현재위치가 mammals인데 위로 가고싶다
 - cd ./mammals -> 현재에서 mammals로 이동
 - cd .. -> 위로 빠져나옴

3) 깃 초기화: git init(.git에 모든 변경사항(스냅샷) 저장)

4) 상태 체크: git status
 - git add <파일>
 - git commit -m <메세지>

- 깃이 모르는 파일일 경우(untracked -> add -> tracked) // add -> commit (add 안하면 아무리 commit 해도 저장 안)

[main (root-commit) 1c5f939] init commit
 1 file changed, 7 insertions(+)
 create mode 100644 animals.txt

  - branch 정보: main
  - 1c5f939 - 키 정보
  - init commit - 메세지
  1 file changed, 7 insertions(+) : 변경사항


# mkdir(경로 만들기)

-mkdir <파일이름> // 여러 개 만들때: mkdir "new_dir1" "new_dir2"
//퀴즈 그 이상한 노랑 폴더 참고

Q. new_dir로 이동해 디렉터리 "dir2" 만들기
1st. mkdir new_dir
2nd. cd new_dir
3rd. mkdir dir2 (확인: ls)
4th. cd ..(빠져나오기)

#문서 편집기
- vi(visual editor)(우리가 쓰는 거), vim(vi improved), emacs...

- 역할: 프롬포트 파일을 직접 편집할 수 있게 해주는 툴

- 특징
1) 화면 단위 편집기
2) 유닉스 계열에서 가장 많이 사용
3) 텍스트 편집 기능만 제공함

- "less"처럼 어딜 들어가서 빠져나오는 방식

- 모드: 일반모드 <-> 입력모드 <-> 명령모드(파일저장 | 덮어쓰기 | 빠져나오기)
   ㄴ Esc로 전환

- 입력모드
1) i(인자 아님): 한 커서에서 입력
2) a: 한 커서 한 칸 뒤에서 입력
3) o: 한 줄 추가 후 입력

- 명령모드(콜론 붙여야함) // less와 다른 점
1) :q -> 그냥 나감
2) :wq -> 쓰고 나감                + enter
3) :wq! -> 강제로 나감

=> vi로 파일 열기 -> 입력모드 -> Esc -> 빠져나오기

Q. 파일 아무거나 열어서 수정하고 저장하고 나오기[set -o vi 입력하고 시작(vim 라인에서 엔터)]
1st. vi animals.txt -> enter
2nd. i | a | o 입력 후 수정
3rd. Esc -> :wq

---------------------------------------------------------------------------------------

2.2 패턴 매칭
- 프롬프트(우리가 명령을 실행하는 곳)에서 셸(사용자와 운영체제 연결해주는 매개), 프로그램이 작동함
grep Linux sample.txt

- 셸의 역할: 명령 실행, 와일드카드 처리, 파이프라인 처리
셸이 패턴매칭을 처리하여 결과물을 프로그램에 보냄
*(와일드카드).txt -> sample.txt, a.txt, ... 이거를 목록으로 만드는게 셸의역할
head xxx | grep | ... 이걸 입력으로 보내는게 셀의 역할

- 리눅스 - 셸, 프롬프트 - 사용자

- *(애스터리스)
 - zero or more
 - 0개 이상의 연속열과 일치하는

- ?
 - 1개 매칭
 ex) ch1...ch100있을때 grep Linux ch? // 한자리수만 매칭
                                 ch?? // 두자리수 매칭

- []
 - 대괄호 안에 열거되어 있는 것 중 일치하는 문자열 1개 있을 때
 ex) grep Linux ch[12345] // 1(o) 12(x)
                ch[1-5]
 
Q. 짝수로 끝나는 모든 파일
grep Linux ch[24680] -> 45도 가능하기 때문에 안됨
// "ch2", "ch4", "ch6", "ch8", "ch0"라는 이름을 가진 파일 중에서 "Linux"라는 단어를 찾습니다.

grep Linux ch*[24680]

Q. 대문자로 시작하고 언더스코어 포함되어 있는 파이썬 파일 매칭
grep Linux [A-Z]*_*.py

Q. /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회
ls /etc/*.conf

- 주의할 점
: 매칭되는 파일이 없으면 에러


2.3 변수 평가 // 평가: 변수를 리터럴 값으로 치환하여 값을 평가함
$VAR - 이미 지정된 변수 $var - 지정한 변수
$HOME - 루트 디렉터리 $USER - 사용자명

- 변수 설정하기
name=lee // 공백 없어야함, 변수 처음 선언시 $ 안씀, 변수 사용하려면 앞에 $변수명
변수=값

Q. age라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다." 변수 이용해 출력
age=21
echo 내 나이는 $age살이다.

- dir1=$HOME/notes/chapter1
나중에 $dir1만 써도 됨
- cd $dir1


# 패턴과 변수 
mammals
 ㄴ lizard.txt
 ㄴ snake.txt

reptiles

mv <from> <to>
Q. 변수에 담아 이동시키려면?
1st. dir1=mammals/*.txt
2nd. mv $dir1 reptiles

Q. 패턴 매칭으로 이동시키려면?
mv mammals/*.txt reptiles

2.4 alias
: 단축어를 별명으로 설정
ex) alias uniqc="uniq-c"

- shadowing
: 이미 존재하는 명령어나 다른 별칭을 덮어쓰는 것 // 기존에 존재하던 명령어나 별칭은 사용할 수 없게 됨
ex) alias grep="grep Linux *.txt"

- 별명 지울때
: unalias
ex) unalias uniqc

2.5 리다이렉션
: 입출력 방향을 다른 곳으로 바꿈
ex) ls -l -> 디스플레이로 받지 않고 파일로 저장

표준스트림
: 파일을 읽고 쓰는 과정처럼 데이터를 입출력하는 것

- 데이터가 반복적으로 흐른다는 특징
- 키보드 -> 운영체제 -> 디스플레이
 - stdin
 - stdout
 - stderr
 - out과 err 다른 방식(루트)로 출력됨

 1) 출력 리다이렉션
 : 출력 내용을 표준출력이 아닌 파일로 보내 저장
 syntax: 명령 > 파일이름 (덮어씌워짐)

 2) 입력 리다이렉션
 : 표준출력을 키보드 다신 파일에 연결
 syntax: 명령 < 입력내용 읽어올 파일명

 $ wc animals.txt // 파일명을 인수로 받아 파일의 내용 입력받음
 -> 7 51 325 animals.txt
 $ wc < animals.txt // 파일과 연결된 표준 입력을 통해 입력받음
 -> 7 51 325

 3) 리다이렉션이 불가능한 출력
 - 표준오류는 리다이렉션 불가능
 - 단, 2>를 사용하면 리다이렉션 가능 (2> 파일명)
 - 2>> (리다이렉트된 내용을 파일 뒤에 추가)
 - 표준출력과 오류 같이 리다이렉션 하려면? &>
 
 cp: copy

 # cat(concarenate)
 - 하나 이상의 파일을 다른 여러 종류의 파일과 연결할때 많이 사용
  - 파일 복사, 합침..

  cat w1.txt > w2.txt -> w1이 w2에 복사됨
  cat w1.txt >> w2.txt -> w2에에 w1이 추가됨

Q. 존재하는 파일과 존재하지 않는 파일 모두 읽어서 새로운 파일 만들기
cat w1.txt non.txt &> w2.txt // w2에 "cat: non.txt: No such file or directory" 이런거 뜸

 4) 입출력 모두 다 같이
- 명령 < 입력파일 > 출력파일

Q.animals.txt에서 Perl이 있는 라인의 글자(character) 수 세고 결과를 파일(result)로. 입력도 한번에 리다이렉션
grep Perl < animals.txt | wc -c > result

빠져나올때: ctrl + c


2.6 Escape Letters
: 특정문자가 가지고 있는 기능을 차단하게 해주는 기능

ex) \\n, \\t 

- \ (역슬래시, 백슬래시)

 1) ''
  - 제일 강력한 역한
  - 안에 있는 모든 기능 해제
  ex) '$HOME' (그대로 출력)

 2) ""
  - 일부 기능은 해제하지 않음
  - $ 해석 가능

 3) \
  - 일부분 지정해서 기능 해제(문자 그대로 읽게 함)
  - 명령 줄 뱌꿔쓰기 할 떄 많이 사용
  - 명령 무효화 가능
  ex) alias less="less -c" // 별명 설정
      \less myfile // 별명 무시한 채로 less 그대로 실행

  - 가독성 높일 수 있음
  ex) cut -f1 grades \
      | sort \
      | uniq -c
  
Q. 큰 따옴표 안에 큰 따옴표 사용하려면?
echo "home\"" 
-> home"

2.7 검색경로
- 검색경로는 각 디렉터리의 이름을 콜론(:)으로 구분
tr <A> <B> -> A를 B로 변경

- 검색경로 확인 명령: which, type(검색경로 뿐 아니라 더 넓은 범위(별명)에서 경로 조회)
-> 별명이 검색경로 우선함


2.8 초기화 파일
- shell environment
- 초기화 파일
- 'ls -l $HOME' : 숨겨진 파일까지 모두 출력
- $HOME/.bashrc
- vi로 파일 열기 -> 수정 -> 적용(source)
- 사용자가 자주 사용하는 환경 저장해 항상 셸 켤때마다 적용되도록 함


3.1 명령 히스토리
- command history
- 우리가 커맨드라인에 입력한 명령들을 셸이 저장해서 가지고 있음
- 히스토리 사용해 이전 명령을 불러와 재사용하는 기능 익힘

 1) 히스토리 열람
 - histroy
 - LIFO(last in first out)
 - history 

Q. 히스토리를 가장 처음부터 10개 출력하기(1-10) + 한 화면에
history | head (o)
history 10 (x) -> 가장 최근것부터 10개

Q. 전체 히스토리에서 echo만 출력
history | grep echo
history | grep -w echo -> echo... 포함 안하므로 더 정확

 - history -c
 : 다 지움
 
 2) 재사용(이전 명령 불러오)
 1. 커서링
  - 위아래 키를 사용해 히스토리 열람
  - 간단 but 느림
  - 이전 2-3개 명령일 경우 사용
  - 입력한 역순으로 이전 명령 불러옴
  - $HISTSIZE=-1 (무한 저장)

  반복되는 명령은?
  $HISTCONTROL=ignoredups(디폴트) // 중복명령 한개만 저장
  - 모든 명령 히스토리는 $HISTFILE에 저장됨
  
 2. 히스토리 확장
  - 특별한 표현식 사용하는 방법
  - 명령을 가져오고 실행까지 함
  - !! -> 이전 명령
  - !<명령어>
  : 가장 마지막에 한 특정 명령 가져와 실행
  - !<숫자>
  : 명령 히스토리에서 n번째 저장된 명령 불러옴(음수 가능)

  - 장점: 쉬움
  - 단점: 실행까지 조심

  - 단점 방지
   - :p(확인)
   - !!(확인했을때 해당 명령을 실행해도 된다면 입력 후 실행)
    ex) !70:p -> !! // 실행됨

   Q. 이전 명령의 단어 수 세기
   !! | wc -c
   !!:p | wc -c

  - 파일 삭제할 때
   - !$: 이전 명령의 마지막 내용
    - head grades2($)
    - alias rm='rm -i' // 삭제하기 전에 확인 가능

  - !* // 파일이 여러개일떄

 3. 증분 검색
  - Ctrl + R -> 원하는 이전 명령 아무부분 입력 -> 찾았으면 enter

- 요약
: 명령행 표현 효울적으로 잘하자

 #1. 캐럿을 이용한 히스토리 확장
 md5sum *.jpg | ... | ...

^jp^jpg
 <패턴>:s/from_cmd/to_cmd
 !!:s/jp/jpg
 !md5sum/jp/jpg

----------------------------------------------------------------------------------------------------

 #1. 총정리
 ##  programs

 - <프로그램> <옵션> <인수>
 - -ch
 - 여기에 필요한 인수는 때에 따라 디렉토리가 될 수 있고...
 - ex) ls -l /etc/passwd

 1) date
 : 날짜 표시하는 명령

 2) who              // user/your_name 이름이 나와야 함
 : 로그인한 유저 정보

 3) echo
 - 공백 유지 가능
 - 변수 치환 가능
 
 4) ls
 : 파일 디렉토리를 조회하는 것 // -l -> 더 자세하게 조회 // -a -> 숨겨져 있는 것까지
 - 멀티 컬럼으로 stdout
 - 인수가 디렉토리
 - 인수로 파일명 쓰면 이름 그대로 반환

 5) cat + 파일1, 2, ... n
  - concentrate
  - 인수로 파일명
  - 파일 이어붙이기 기능

 6) wc
  - 라인 단어 글자수 세기
  - -l   -w   -c
  - 인수가 없으면 stdin으로 받는다

 7) cp
  - copy fromA toB
  - 다른 디렉토리일 경우
   - 상대경로로 쓰는게 편함
    ex) cp b ./notes
        ls
        ls notes // 확인
  - 여러 파일 복사 가능
    cp 1 2 3 4 5 6
    1 - 5가 from, 6이 to
    
  Q. OSS에서 notes/b를 복사해서 가져오는 코드 작성
  runner
  OSS
   ㄴnotes
      ㄴ b
  cp ./OSS/notes/b .

  8) mv
   - move
   - mv fromA toB
   mv 1 2 3 4 5 "6"
   - 파일명 변경할 때
    mv a aa # a 사라지고 aa
  - 디렉토리 A -> B
  ex) sample -> notes # mv sample notes

*** 기존에 존재하는 파일명일 경우, 덮어쓴다.

 9) rm
  - remove
  - 파일명
   - 디렉토리가 인수로 올땐 비어있어야함
   - -r -> 디렉토리
   - 여러개 지울 수 있다
    rm a b c d
    rm *.txt
  - 확인하고 지울 것

  10) rmdir
   -empty


## 디렉토리 관련 명령
모든 것은 홈에서 시작 # 루트라고도 함
1) pwd
print working directory

2) cd
 - 빠져나올때 점 두개 cd ..
 - cd만 치면 홈으로 감

Q. note에서 runner로 한번에 가는 방법
cd ../..

3) mkdir
 - make directory

4) rmdir

5) ln
 - link files
 - ln fromA fromB
 - a, b
 - 항상 동기화 시키고 싶을 때
 - 메모리 효율
 - 다른 디렉토리에 동일한 파일 위치시키고 싶을 
 - ls -l로 확인 가능
 - 파일 하나를 삭제해도 다른 파일은 삭제되지 않음

##패턴매칭
1. asterisk
 - "*"
 - zero or more
   cat * #현재 디렉토리에 있는 모든 파일
   chapter* # chapter로 시작하는 모든 파일

   Q. t가 들어있는 모든 파일
    *t*
    
2. ?
 - 한개 매칭
   echo ? # 글자 한개로 된 파일 전부
   echo ?? # bb

3. [ ]
 - 특정 글자 1개 매힝되는 것 전부
 [abcd] # 하나라도 있으면 매칭
 [0-9] # 모든 숫자

 Q. o를 제외한 모든 소문자
 [a-np-z]
 [!o] # execpt

4. escape letter
 - 공백, $, ...
 - \
  cat file_a file_b
  cat hello\ world
  ''와 "" 사용
  - echo 예외
  
Q. 'who are you?'라는 디렉토리 생성 후 목록 조회
1st. mkdir 'who are you?' || mkdir who\ are\ you\?
2nd. ls # 확인

## 리다이렉션
 - 입력 <
 - 출력 >
 - 에러 2
  - "" > cp_patternl

## 파이프라인
- |
- 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다
- A | B | ...
- "필터": 파이프라인을 사용할 수 있는, 입출력값을 수정할 수 있는 프로그램
 - grep, cut, 

##
 - ; -> 여러 명령 한 줄에 쓸때
 - date; pwd

 - 오래 걸리는 명령 백그라운드로 보내기
  - <명령> &
   ex) cat bigdat > file1 & 
  - 다른 프로그램 동시에 수행 가능
  - stdin (조심)

- ps
 - 프로세스 정보 나타냄
 - PID: id
 - TTY: 터미널 정보
 - time: 구동 시간
 - cmd - 프로세스 이름

## 명령 2
1. cut
 - cut <옵션> 파일명
 - -f, -c, -d
 
 Q. 10번째 글자부터 끝까지
 cut -c10-

 - -d<구분자> # default는 탭

2. paste
 - cut과 반대됨
 - 칼럼별로 데이터 붙임
 - 디폴트는 탭
 ex) paste -d: grades letters
 
 - -s # 같은 파일을 수정할 경우
 ' ' -> \t
 ex) paste -s -d'  ' file

 3. grep
  - grep <패턴> <디렉토리>
  - 패턴에 매칭되는 문자열을 가진 라인 출력
  - 매칭 없으면 아무것도 출력되지 않음
  
    grep Linux * # 파일 내부의 텍스트
    ... | grep Linux # 출력에서 받은 입력값
    
  Q. 전체 파일에서 * 패턴 가진 것 찾기
  grep \* * # 왜 안될까?
  grep '*' *

  => 패턴은 작은 따옴표 쓰는게 좋음

  -i -> 대소문자 구분 안함
  -w -> 정확한 매칭만
  -v -> 반대
  -l -> 해당 매칭이 있는 파일명
  -n -> 라인 넘버 같이 출력
  
  Q. 해당 매칭이 있는 파일 개수
  grep -l 'A' * | wc -l
  
 4. sort
  - 정렬
  - 라인별로, 오름차순 디폴트
  - -r
  - - n
   - 셸은 모든 인수를 분자별로 인식
     str : 1 11 2 3
     int : 1 2 3 11
  - 특수문자, 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의
  - ' ' # 32, \
  - -u : sort + uniq
  - -o :
   - sort file1 > file1 (x)
   - 정렬된 결과물 같은 파일에 저장

 5. uniq
  - 중복 삭제
  - 인접한 것만 고려
  - -d -> 결과 중 중복된 것 삭제
  - -c : 중복된 횟수 카운트

 6. tr
  - tr from_char to_char
  - tr e x file
  -> tr e x < animals.txt
  - stdin만 가능
  - animals.txt e -> x
  - 소문자 -> 대문자
  -> tr [a-z] [A-Z] < animals.txt

  - -d -> 삭제
  tr -d the



- 정규표현식
- grep
- cd
- sed (5장)

#1. 정규표현식
- 와일드카드와 혼동하지 말것
 * ? 000 chapter*.txt (2장)
- 패턴매칭 할 때 사용
- 1 line 기준 
- 가장 긴 문자열 매칭
 
 ##1. 마침표
  - any single character
  - r. # ro rk rc ....
  - .x. # xxx, oxo, ...
  - [a-zA-Z]

##2. ^ (caret)
 - 라인의 처음
 - [^] # not
 - [^a-z] # 소문자가 아닌
 
##3. $ (ampersand)
 - 라인의 끝
 - '^ $' # 빈줄

##4. [리스트]
 - [a-z]
 - [a-np-z] # o를 제외한 모든 소문자
 - [a-n][p-z]
 - grep '[Tt]he' animals.txt
 - grep -i 'the' animals.txt

##5. *
 - zero or more
 - x* # x.....
 - 앞글자 한정
 - x 시작하는 단어
 : x*  (x)
 : xx* (o)

##6. \+
 - 1개 이상
  x\+

##7. \?
 - zero or more

##8. \{i.j\}
 - j :
 - i,
 - ,j
 - x\{10\} # 10번
 - x\{1,10\} # 1번부터 10번
 - x\{10.\} # 10번 이상

##9. \(regex\)
 - back referencing이 가능하다
 - '^\(.\)\(.\)\2\1' # 동일한 알파벳 2개로 시작하는 라인 *aa...

 - abba
 : '^\(.\)\(.\)\2\1'

##10. regex1 \| regex2
 - regex1 or regex2

Q.
1) a-f까지 매칭
2) b나 ab 매칭
3) 2번 + aaaaaab 매칭
4) 모든 글자 매칭
5) #으로 시작하는 문장 매칭
6) \로 끝나는 문장 매칭
7) 대문자로 시작하지 않는 문장 매칭
8) 빈줄이 아닌 모든 줄 매칭
9) cookie나 cake가 포함된 줄 매칭
10) w. 매칭

